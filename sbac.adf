// Approximation modeling declaration
DM Float2HalfPrecision(); 
IM EvoApprox8B(word a, word b, word hi, word lo, int mul, bool sign);
IM EvoApprox8B(word a, word b, word r, int mul, bool sign);

// Energy models
EM simple_em(); 

// Operating parameters
OP default_op  = {scaling   = 1.0000};
OP mul8_303_op = {scaling   = 0.9568};
OP mul8_469_op = {scaling   = 0.7919};
OP mul8_479_op = {scaling   = 0.7005};
OP mul8_423_op = {scaling   = 0.4997};
OP mul8_279_op = {scaling   = 0.3930};
OP half_fp_op  = {scaling   = 0.7000};

// Default energy model and operating parameters
energy=simple_em(); 
parameters=default_op;

// Instruction groups
group FP { // Single-Precision Floating-Point 
	instruction = {
    abs.s,
    add.s,
    div.s,
    mov.s,
    mul.s,
    neg.s,
    sub.s,
    sqrt.s,
    madd.s,
    msub.s
  };
}

group FP_RD { // Single-Precision Floating-Point, read only
	instruction = {
    c.eq.s,
    c.ole.s,
    c.olt.s,
    c.ueq.s,
    c.ule.s,
    c.ult.s,
    c.un.s,
    cvt.d.s,
    trunc.w.s,
    swc1,
    swxc1,
    movz.s,
    movn.s,
    movt.s,
    movf.s
  };
}

group FP_WR { // Single-Precision Floating-Point, write only
	instruction = {
    lwc1,
    lwxc1,
    cvt.s.d,
    cvt.s.w
  };
}

approximation HALF_PRECISION {
  initial=off;
  group FP {
	  regbank_read=Float2HalfPrecision();
	  regbank_write=Float2HalfPrecision();
	  parameters=half_fp_op;
  }
  group FP_RD {
	  regbank_read=Float2HalfPrecision();
	  parameters=half_fp_op;
  }
  group FP_WR {
	  regbank_write=Float2HalfPrecision();
	  parameters=half_fp_op;
  }
}

approximation MUL8_303 {
	initial=off;
	instruction mult {
		alt_behavior = EvoApprox8B(RB[rs], RB[rt], hi, lo, 303, true);
    parameters = mul8_303_op;
	}
	instruction multu {
		alt_behavior = EvoApprox8B(RB[rs], RB[rt], hi, lo, 303, false);
    parameters = mul8_303_op;
	}
	instruction mul {
		alt_behavior = EvoApprox8B(RB[rs], RB[rt], RB[rd], 303, true);
    parameters = mul8_303_op;
	}
}

approximation MUL8_469 {
	initial=off;
	instruction mult {
		alt_behavior = EvoApprox8B(RB[rs], RB[rt], hi, lo, 469, true);
    parameters = mul8_469_op;
	}
	instruction multu {
		alt_behavior = EvoApprox8B(RB[rs], RB[rt], hi, lo, 469, false);
    parameters = mul8_469_op;
	}
	instruction mul {
		alt_behavior = EvoApprox8B(RB[rs], RB[rt], RB[rd], 469, true);
    parameters = mul8_469_op;
	}
}

approximation MUL8_479 {
	initial=off;
	instruction mult {
		alt_behavior = EvoApprox8B(RB[rs], RB[rt], hi, lo, 479, true);
    parameters = mul8_479_op;
	}
	instruction multu {
		alt_behavior = EvoApprox8B(RB[rs], RB[rt], hi, lo, 479, false);
    parameters = mul8_479_op;
	}
	instruction mul {
		alt_behavior = EvoApprox8B(RB[rs], RB[rt], RB[rd], 479, true);
    parameters = mul8_479_op;
	}
}

approximation MUL8_423 {
	initial=off;
	instruction mult {
		alt_behavior = EvoApprox8B(RB[rs], RB[rt], hi, lo, 423, true);
    parameters = mul8_423_op;
	}
	instruction multu {
		alt_behavior = EvoApprox8B(RB[rs], RB[rt], hi, lo, 423, false);
    parameters = mul8_423_op;
	}
	instruction mul {
		alt_behavior = EvoApprox8B(RB[rs], RB[rt], RB[rd], 423, true);
    parameters = mul8_423_op;
	}
}

approximation MUL8_279 {
	initial=off;
	instruction mult {
		alt_behavior = EvoApprox8B(RB[rs], RB[rt], hi, lo, 279, true);
    parameters = mul8_279_op;
	}
	instruction multu {
		alt_behavior = EvoApprox8B(RB[rs], RB[rt], hi, lo, 279, false);
    parameters = mul8_279_op;
	}
	instruction mul {
		alt_behavior = EvoApprox8B(RB[rs], RB[rt], RB[rd], 279, true);
    parameters = mul8_279_op;
	}
}
