/******************************************************
 * VArchC Models implementation templates             *
 * This file is automatically generated by ArchC      *
 * WITHOUT WARRANTY OF ANY KIND, either express       *
 * or implied.                                        *
 * For more information on ArchC, please visit:       *
 * http://www.archc.org                               *
 *                                                    *
 * The ArchC Team                                     *
 * Computer Systems Laboratory (LSC)                  *
 * IC-UNICAMP                                         *
 * http://www.lsc.ic.unicamp.br                       *
 ******************************************************/
 

#include "vac_models.H"

uint8_t Kulkarni_base(uint8_t a, uint8_t b) {
  if (a == b && a == 0x3) {
    return 0x7;
  }
  else {
    return a * b;
  }
}

uint64_t Kulkarni(uint32_t a, uint32_t b) {
  uint64_t r = 0;
  for (int i = 0; i < 32; i += 2) {
    for (int j = 0; j < 32; j += 2) {
      r += Kulkarni_base( (a&(0x3<<j))>>j, (b&(0x3<<i))>>i ) << (i + j);
    }
  }
  return r;
}

VARCHC_MODEL_IM KulkarniSigned(word a, word b, word hi, word lo){
	// Implementation of KulkarniSigned
  uint32_t op_a = a, op_b = b;

  bool sr = false;
  if (0x80000000&op_a) {
    op_a = (~op_a) + 1;
    sr = !sr;
  }
  if (0x80000000&op_b) {
    op_b = (~op_b) + 1;
    sr = !sr;
  }

  uint64_t res = Kulkarni(op_a, op_b);

  if (sr) {
    res = (~res) + 1;
  }

  hi = (res >> 32) & 0xFFFFFFFF;
  lo = res & 0xFFFFFFFF;
}

VARCHC_MODEL_IM KulkarniUnsigned(word a, word b, word hi, word lo){
	// Implementation of KulkarniUnsigned
  uint32_t op_a = a, op_b = b;
  uint64_t res = Kulkarni(op_a, op_b);
  hi = (res >> 32) & 0xFFFFFFFF;
  lo = res & 0xFFFFFFFF;
}

VARCHC_MODEL_IM KulkarniSigned(word a, word b, word r){
	// Implementation of KulkarniSigned
  uint32_t op_a = a, op_b = b;

  bool sr = false;
  if (0x80000000&op_a) {
    op_a = (~op_a) + 1;
    sr = !sr;
  }
  if (0x80000000&op_b) {
    op_b = (~op_b) + 1;
    sr = !sr;
  }

  uint64_t res = Kulkarni(op_a, op_b);

  if (sr) {
    res = (~res) + 1;
  }

  r = res & 0xFFFFFFFF;
}

VARCHC_MODEL_EM DefaultEM(){
	// Implementation of DefaultEM
  return OP["scaling"];
}

